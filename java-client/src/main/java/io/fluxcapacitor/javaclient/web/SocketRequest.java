/*
 * Copyright (c) Flux Capacitor IP B.V. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *     http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.fluxcapacitor.javaclient.web;

import com.fasterxml.jackson.databind.JsonNode;
import io.fluxcapacitor.common.serialization.JsonUtils;
import io.fluxcapacitor.javaclient.tracking.handling.Request;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Value;

import java.util.concurrent.atomic.AtomicLong;

/**
 * A wrapper representing a serialized request sent over a WebSocket session.
 * <p>
 * Each {@code SocketRequest} includes a unique {@code requestId} used to track and match responses, and a
 * {@link JsonNode} representation of the actual request payload.
 * <p>
 * Requests are typically created using the static {@link #valueOf(Object)} method, which serialize the original request
 * object to JSON. The {@code requestId} can be autogenerated or provided explicitly.
 *
 * <p>
 * <strong>Note:</strong> In most cases, {@code SocketRequest}s and {@code SocketResponse}s are created and handled
 * automatically by the {@link SocketSession}. Developers working within a Flux Capacitor system typically do not need
 * to construct them manually. However, understanding their format becomes important when integrating with non-Flux
 * systems—such as a browser-based UI—over WebSocket. In such scenarios, this class defines the structure of a request
 * expected by a Flux client.
 *
 * @see SocketSession#sendRequest(Request, java.time.Duration)
 * @see SocketResponse
 */
@Value
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class SocketRequest {

    /**
     * Counter used to generate unique request IDs for new socket requests.
     */
    public static final AtomicLong counter = new AtomicLong();

    /**
     * Unique identifier for the request. Used to correlate with responses.
     */
    long requestId;

    /**
     * JSON-encoded representation of the original request object.
     */
    JsonNode request;

    /**
     * Creates a new {@code SocketRequest} with an auto-incremented ID and the given request object.
     *
     * @param request the request object to be sent over the WebSocket session
     * @return a new {@code SocketRequest} instance with a unique ID
     */
    public static SocketRequest valueOf(Object request) {
        return new SocketRequest(counter.incrementAndGet(), JsonUtils.valueToTree(request));
    }

    /**
     * Indicates whether this socket request is valid.
     * <p>
     * A request is considered valid if it has a positive {@code requestId} and a non-null payload.
     *
     * @return {@code true} if valid, {@code false} otherwise
     */
    boolean isValid() {
        return getRequestId() > 0 && request != null;
    }
}
